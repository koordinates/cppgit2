PROJECT(cppgit2)
CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Add libgit2
find_package(PkgConfig)
if(PkgConfig_FOUND)
  PKG_CHECK_MODULES(LIBGIT2 libgit2>=0.99)
endif()
if(NOT LIBGIT2_FOUND)
  ADD_SUBDIRECTORY(ext/libgit2 ${CMAKE_BINARY_DIR}/lib)
  set(LIBGIT2_INCLUDEDIR ext/libgit2/include)
endif()

INCLUDE(CMakePackageConfigHelpers)

OPTION(CPPGIT2_BUILD_SAMPLES "Build example" OFF)

# Sources for cppgit2
FILE(GLOB CPPGIT2_SOURCES "src/*.cpp")
FILE(GLOB CPPGIT2_HEADERS "include/cppgit2/*.hpp")

# Version information
SET(CPPGIT2_VERSION_MAJOR 0)
SET(CPPGIT2_VERSION_MINOR 1)
SET(CPPGIT2_VERSION_REV 0)
SET(CPPGIT2_VERSION_STRING "${CPPGIT2_VERSION_MAJOR}.${CPPGIT2_VERSION_MINOR}.${CPPGIT2_VERSION_REV}")

# Build option for shared vs. static lib (Same option as for libgit2)
OPTION(BUILD_SHARED_LIBS "Build Shared Library (OFF for Static)" OFF)

# Build object library
INCLUDE_DIRECTORIES("include" "${LIBGIT2_INCLUDEDIR}" "test")

# Build shared/static library
if (BUILD_SHARED_LIBS)
  ADD_LIBRARY(cppgit2 SHARED ${CPPGIT2_SOURCES} ${CPPGIT2_HEADERS})
  SET_TARGET_PROPERTIES(cppgit2 PROPERTIES
    VERSION ${CPPGIT2_VERSION_STRING}
    SOVERSION ${CPPGIT2_VERSION_MINOR}
    WINDOWS_EXPORT_ALL_SYMBOLS ON)
else ()
  ADD_LIBRARY(cppgit2 STATIC ${CPPGIT2_SOURCES} ${CPPGIT2_HEADERS})
endif ()

TARGET_COMPILE_FEATURES(cppgit2 PUBLIC cxx_std_17)

# Shared libraries need PIC
SET_PROPERTY(TARGET cppgit2 PROPERTY POSITION_INDEPENDENT_CODE 1)

TARGET_INCLUDE_DIRECTORIES(cppgit2
  PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/ext/libgit2/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/include")
TARGET_LINK_LIBRARIES(cppgit2 git2)

# Copy include directories to build/include
FILE(COPY "include" DESTINATION "${CMAKE_BINARY_DIR}/.")
FILE(COPY "${LIBGIT2_INCLUDEDIR}/git2" DESTINATION "${CMAKE_BINARY_DIR}/include")
FILE(COPY "${LIBGIT2_INCLUDEDIR}/git2.h" DESTINATION "${CMAKE_BINARY_DIR}/include")

# Build samples

IF(CPPGIT2_BUILD_SAMPLES)
  FILE(GLOB SAMPLES "samples/*.cpp")
  FOREACH(SAMPLE ${SAMPLES})
    GET_FILENAME_COMPONENT(SAMPLE_EXE ${SAMPLE} NAME_WE)
    ADD_EXECUTABLE(${SAMPLE_EXE} ${SAMPLE})
    SET_TARGET_PROPERTIES(${SAMPLE_EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/samples")
    TARGET_LINK_LIBRARIES(${SAMPLE_EXE} cppgit2)
    SET_PROPERTY(TARGET ${SAMPLE_EXE} PROPERTY CXX_STANDARD 11)
  ENDFOREACH()
ENDIF()

# Build tests
FILE(GLOB TESTS "test/*.cpp")
SET_SOURCE_FILES_PROPERTIES(test/main.cpp
    PROPERTIES
    COMPILE_DEFINITIONS DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN)
ADD_EXECUTABLE(cppgit2_test ${TESTS})
SET_TARGET_PROPERTIES(cppgit2_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/test")
TARGET_LINK_LIBRARIES(cppgit2_test cppgit2)
SET_PROPERTY(TARGET cppgit2_test PROPERTY CXX_STANDARD 11)
